<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>LIPS Scheme blog</title>
        <link>https://lips.js.org/blog</link>
        <description>LIPS Scheme blog RSS Feed</description>
        <lastBuildDate>Sun, 14 Sep 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>Copyright Â© 2025 Jakub T. Jankiewicz</copyright>
        <item>
            <title><![CDATA[How to Serialize Any Object in JavaScript?]]></title>
            <link>https://lips.js.org/blog/serialization</link>
            <guid>https://lips.js.org/blog/serialization</guid>
            <pubDate>Sun, 14 Sep 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[In this article, I will explain how the serialization of objects (in dump compiler) works in LIPS.]]></description>
            <content:encoded><![CDATA[<p>In this article, I will explain how the serialization of objects (in dump compiler) works in LIPS.</p>
<br/><a href="/blog/serialization">see the rest of the article</a>]]></content:encoded>
            <category>javascript</category>
            <category>internals</category>
        </item>
        <item>
            <title><![CDATA[Internals: Syntax Extensions]]></title>
            <link>https://lips.js.org/blog/syntax-extensions</link>
            <guid>https://lips.js.org/blog/syntax-extensions</guid>
            <pubDate>Mon, 21 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Syntax extensions are a feature in LIPS Scheme that allow users to add new syntax. They work similar]]></description>
            <content:encoded><![CDATA[<p>Syntax extensions are a feature in LIPS Scheme that allow users to add new syntax. They work similar
to readers, macro in Common Lisp. You create a sequence of characters that maps to a function that
is executed by the parser, the function works similar to a macro and a result of the function is
returned by the parser in place of the sequence of defined characters.</p>
<br/><a href="/blog/syntax-extensions">see the rest of the article</a>]]></content:encoded>
            <category>parser</category>
            <category>javascript</category>
            <category>internals</category>
        </item>
        <item>
            <title><![CDATA[Internals: Finite-State Machine Lexer]]></title>
            <link>https://lips.js.org/blog/lexer</link>
            <guid>https://lips.js.org/blog/lexer</guid>
            <pubDate>Thu, 20 Feb 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[The first version of LIPS Scheme had regex based tokenizer. It was using a single regex to split the]]></description>
            <content:encoded><![CDATA[<p>The first version of LIPS Scheme had regex based tokenizer. It was using a single regex to split the
input string into tokens. In this article, I will show the internals of the new
<a href="https://en.wikipedia.org/wiki/Lexical_analysis">Lexer</a> in LIPS Scheme.</p>
<br/><a href="/blog/lexer">see the rest of the article</a>]]></content:encoded>
            <category>lexer</category>
            <category>javascript</category>
            <category>internals</category>
        </item>
        <item>
            <title><![CDATA[Scheme Regex literals in Emacs]]></title>
            <link>https://lips.js.org/blog/emacs-scheme-regex</link>
            <guid>https://lips.js.org/blog/emacs-scheme-regex</guid>
            <pubDate>Sat, 09 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[LIPS Scheme support regular expression literals, but it's not the only one implementation that]]></description>
            <content:encoded><![CDATA[<p>LIPS Scheme support regular expression literals, but it&#39;s not the only one implementation that
support those.  Other implementation includes <a href="https://practical-scheme.net/gauche/">Gauche</a> and
<a href="https://www.gnu.org/software/kawa/index.html">Kawa</a>.</p>
<p>Unfortunetlly, you can&#39;t easily use those regular expressions in <a href="https://en.wikipedia.org/wiki/GNU_Emacs">GNU
Emacs</a>, my main editor of choice.</p>
<br/><a href="/blog/emacs-scheme-regex">see the rest of the article</a>]]></content:encoded>
            <category>scheme</category>
            <category>emacs</category>
        </item>
        <item>
            <title><![CDATA[LIPS Scheme History]]></title>
            <link>https://lips.js.org/blog/lips-history</link>
            <guid>https://lips.js.org/blog/lips-history</guid>
            <pubDate>Sun, 03 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the first article on LIPS blog. In this article I will write about the history of LIPS]]></description>
            <content:encoded><![CDATA[<p>This is the first article on LIPS blog. In this article I will write about the history of LIPS
Scheme interpreter.</p>
<br/><a href="/blog/lips-history">see the rest of the article</a>]]></content:encoded>
            <category>lips</category>
            <category>scheme</category>
            <category>history</category>
        </item>
    </channel>
</rss>